%lexer

[a-zA-Z_][a-zA-Z_0-9]* TOKEN
"([^"]|\\")+" STRLITERAL
\s+ %restart
([0-9]*\.[0-9]+|[0-9]+\.[0-9]*) FLOATLITERAL
([0-9]+) INTLITERAL

%parser

cssfile:
    %empty
    cssfile rule

rule:
    selector "{" block "}":
        print($1.sem)

block:
    %empty
    property block

property:
    TOKEN ":" value ";":
        print("{0} => {1}".format($1.sem, $3.sem))

selector:
    constrainedToken:
        $$.sem = $1.sem
    selector ">" constrainedToken:
        $$.sem = $1.sem + ">" + $3.sem
    selector constrainedToken:
        $$.sem = $1.sem + " " + $2.sem

constrainedToken:
    TOKEN:
        print($1.sem)
        $$.sem = $1.sem
    TOKEN "[" attributes "]":
        $$.sem = $1.sem + "[" + $3.sem + "]"
    TOKEN "." TOKEN:
        $$.sem = $1.sem + "." + $3.sem

attributes:
    attributes "," attribute:
        $$.sem = $1.sem + "," + $3.sem
    attribute:
        $$.sem = $1.sem
    
attribute:
    TOKEN "=" STRLITERAL:
        $$.sem = $1.sem + "=" + $3.sem
    TOKEN:
        $$.sem = $1.sem

value:
    INTLITERAL:
        $$.sem = $1.sem
    FLOATLITERAL:
        $$.sem = $1.sem
    call:
        $$.sem = $1.sem
    TOKEN:
        $$.sem = $1.sem
    STRLITERAL:
        $$.sem = $1.sem

call:
    TOKEN "(" arguments ")":
        $$.sem = $1.sem + "(" + $3.sem + ")"

arguments:
    %empty:
        $$.sem = ""
    arguments "," argument:
        $$.sem = $1.sem + "," + $3.sem
    argument:
        $$.sem = $1.sem

argument:
    TOKEN "=" value:
        $$.sem = $1.sem + "=" + $3.sem
    value:
        $$.sem = $1.sem
    
