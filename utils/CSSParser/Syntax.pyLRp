from Minilanguage import *

%lexer

[a-zA-Z_][a-zA-Z0-9_]* TOKEN
[a-zA-Z_][a-zA-Z0-9_\-]* PROPTOKEN
"([^"]|\\")+" STRLITERAL
(\s+|/\*(.|\n)*\*/) %restart
\#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{4}|[0-9A-Fa-f]{6}|[0-9A-Fa-f]{8}) LCOLOURLITERAL
[+\-]?([0-9]*\.[0-9]+|[0-9]+\.[0-9]*) FLOATLITERAL
[+\-]?([0-9]+) INTLITERAL

%parser

cssfile:
    %empty:
        $$.sem = []
    cssfile rule:
        $$.sem = $1.sem
        $$.sem.append($2.sem)

rule:
    selectors "{" block "}":
        $$.sem = Rule($1.sem, $3.sem)

block:
    %empty:
        $$.sem = []
    block property:
        $$.sem = $1.sem
        $$.sem.append($2.sem)

propertyName:
    PROPTOKEN:
        $$.sem = $1.sem
    TOKEN:
        $$.sem = $1.sem

property:
    propertyName ":" propvalue ";":
        $$.sem = ($1.sem, $3.sem)

selectors:
    selectors "," selector:
        $$.sem = $1.sem
        $$.sem.append($3.sem)
    selector:
        $$.sem = [$1.sem]

selector:
    constrainedToken:
        $$.sem = $1.sem
    constrainedToken ">" selector:
        $$.sem = DirectChildOf($1.sem, chained=$3.sem)
    constrainedToken selector:
        $$.sem = ChildOf($1.sem, chained=$2.sem)

constrainedToken:
    TOKEN:
        try:
            $$.sem = Is(elementnames[$1.sem])
        except KeyError:
            raise ValueError("No such widget: {}".format($1.sem))
    constrainedToken "[" attributes "]":
        $$.sem = HasAttributes(*$3.sem, chained=$1.sem)
    constrainedToken "." TOKEN:
        $$.sem = HasAttributes(AttributeClass($3.sem), chained=$1.sem)
    constrainedToken ":" TOKEN:
        $$.sem = State($3.sem, chained=$1.sem)


attributes:
    attributes "," attribute:
        $$.sem = $1.sem
        $$.sem.append($3.sem)
    attribute:
        $$.sem = [$1.sem]

attribute:
    TOKEN "=" STRLITERAL:
        $$.sem = AttributeValue($1.sem, $3.sem[1:-1])
    TOKEN:
        $$.sem = AttributeExists($1.sem)

propvalue:
    complexliteral:
        $$.sem = $1.sem
    LCOLOURLITERAL:
        $$.sem = $1.sem[1:]

value:
    number:
        $$.sem = $1.sem
    call:
        $$.sem = $1.sem
    TOKEN:
        $$.sem = namespace.get($1.sem)
    STRLITERAL:
        $$.sem = $1.sem[1:-1]

complexliteral:
    value:
        $$.sem = ($1.sem, )
    complexliteral value:
        $$.sem = $1.sem + ($2.sem, )

colourliteral:
    LCOLOURLITERAL:
        $$.sem = $1.sem[1:]
    call:
        $$.sem = $1.sem

number:
    INTLITERAL:
        $$.sem = int($1.sem)
    FLOATLITERAL:
        $$.sem = float($1.sem)

call:
    TOKEN "(" arguments ")":
        $$.sem = namespace.evaluate_call($1.sem, *$3.sem)

arguments:
    %empty:
        $$.sem = []
    arguments "," argument:
        $$.sem = $1.sem
        $$.sem.append($3.sem)
    argument:
        $$.sem = [$1.sem]

argument:
#    TOKEN "=" value:
#        $$.sem = $1.sem + "=" + $3.sem
    value:
        $$.sem = $1.sem
